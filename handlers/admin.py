from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import *
from states import AdminStates
from database import SessionLocal, Application, User, Config
from utils import is_admin, get_statistics, export_to_excel, get_config_value, set_config_value
from datetime import datetime, timedelta

router = Router()

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    stats = get_statistics()
    
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    text += f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_applications']}\n"
    text += f"üè† –ó–∞—è–≤–∫–∏ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {stats['apartment_applications']}\n"
    text += f"üè° –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–º–∞: {stats['house_applications']}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_applications")
async def admin_applications(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:",
        reply_markup=get_applications_keyboard()
    )

@router.callback_query(F.data.startswith("apps_page_"))
async def applications_page(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    page = int(callback.data.split("_")[2])
    await callback.message.edit_text(
        "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:",
        reply_markup=get_applications_keyboard(page)
    )

@router.callback_query(F.data.startswith("app_"))
async def view_application(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[1])
    
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.id == app_id).first()
        if not app:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        user = db.query(User).filter(User.user_id == app.user_id).first()
        
        status_text = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "in_progress": "‚è≥ –í —Ä–∞–±–æ—Ç–µ", 
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }.get(app.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        text = f"üìã –ó–∞—è–≤–∫–∞ #{app.id}\n\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {app.phone}\n"
        text += f"üë®‚Äçüíº –ò–º—è: {app.name}\n"
        text += f"üè† –¢–∏–ø: {'–ö–≤–∞—Ä—Ç–∏—Ä–∞' if app.property_type == 'apartment' else '–î–æ–º'}\n"
        text += f"üìç –°—Ç–∞—Ç—É—Å: {status_text}\n"
        
        if app.building_status:
            building_text = "–°—Ç—Ä–æ—è—â–∞—è—Å—è" if app.building_status == "new" else "–°–¥–∞–Ω–Ω–∞—è"
            text += f"üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: {building_text}\n"
        
        if app.district:
            text += f"üìç –†–∞–π–æ–Ω: {app.district}\n"
        
        if app.rooms:
            text += f"üö™ –ö–æ–º–Ω–∞—Ç: {app.rooms}\n"
        
        if app.has_plot:
            text += f"üå≥ –£—á–∞—Å—Ç–æ–∫: {app.has_plot}\n"
        
        if app.house_type:
            text += f"üè† –¢–∏–ø –¥–æ–º–∞: {app.house_type}\n"
        
        if app.admin_comment:
            text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞:\n{app.admin_comment}\n"
        
        text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {app.created_at.strftime('%d.%m.%Y %H:%M')}"
        text += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {app.updated_at.strftime('%d.%m.%Y %H:%M')}"
        
        await callback.message.edit_text(text, reply_markup=get_application_manage_keyboard(app_id))
        
    finally:
        db.close()

@router.callback_query(F.data.startswith("change_status_"))
async def change_status(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[2])
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}:",
        reply_markup=get_status_keyboard(app_id)
    )

@router.callback_query(F.data.startswith("set_status_"))
async def set_status(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    parts = callback.data.split("_")
    app_id = int(parts[2])
    new_status = parts[3]
    
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.id == app_id).first()
        if app:
            app.status = new_status
            app.updated_at = datetime.utcnow()
            db.commit()
            
            status_text = {
                "new": "üÜï –ù–æ–≤–∞—è",
                "in_progress": "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
                "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", 
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
            }.get(new_status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏
            await view_application(CallbackQuery(
                id=callback.id,
                from_user=callback.from_user,
                chat_instance=callback.chat_instance,
                message=callback.message,
                data=f"app_{app_id}"
            ))
        else:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data.startswith("add_comment_"))
async def add_comment_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[2])
    await state.update_data(app_id=app_id)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"app_{app_id}")]
        ])
    )
    await state.set_state(AdminStates.waiting_for_comment)

@router.message(AdminStates.waiting_for_comment)
async def add_comment_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    user_data = await state.get_data()
    app_id = user_data.get("app_id")
    
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.id == app_id).first()
        if app:
            app.admin_comment = message.text
            app.updated_at = datetime.utcnow()
            db.commit()
            
            await message.answer(
                "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"app_{app_id}")],
                    [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="admin_applications")]
                ])
            )
        else:
            await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    finally:
        db.close()
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_app_"))
async def delete_application_confirm(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[2])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_app_{app_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"app_{app_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É #{app_id}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("confirm_delete_app_"))
async def delete_application_execute(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    app_id = int(callback.data.split("_")[3])
    
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.id == app_id).first()
        if app:
            user = db.query(User).filter(User.user_id == app.user_id).first()
            if user:
                user.has_application = False
            
            db.delete(app)
            db.commit()
            
            await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
            await callback.message.edit_text(
                "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:",
                reply_markup=get_applications_keyboard()
            )
        else:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    finally:
        db.close()


@router.callback_query(F.data == "admin_export")
async def admin_export(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        buffer = export_to_excel()
        
        file = BufferedInputFile(
            buffer.getvalue(),
            filename=f"applications_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        )
        
        await callback.message.answer_document(file, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫")
        await callback.answer("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞.", show_alert=True)

@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data.startswith("settings_"))
async def settings_handler(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    setting_type = callback.data.replace('settings_', '')
    current_value = get_config_value(setting_type)
    
    await state.update_data(config_key=setting_type)
    
    text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_type}\n\n"
    text += f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n{current_value.replace(',', ', ')}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_config_value)

@router.message(AdminStates.waiting_for_config_value)
async def config_value_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    user_data = await state.get_data()
    config_key = user_data.get("config_key")
    
    set_config_value(config_key, message.text)
    
    await message.answer(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {config_key} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "admin_admins")
async def admin_admins(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    db = SessionLocal()
    try:
        admins = db.query(User).filter(User.is_admin == True).all()
        
        text = "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
        for admin in admins:
            text += f"‚Ä¢ {admin.first_name} (@{admin.username or '–Ω–µ—Ç'}) - ID: {admin.user_id}\n"
        
        text += "\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        
    finally:
        db.close()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_admins")]
        ])
    )
    await state.set_state(AdminStates.waiting_for_admin_id)

@router.message(AdminStates.waiting_for_admin_id)
async def add_admin_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        admin_id = int(message.text)
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.user_id == admin_id).first()
            if user:
                if user.is_admin:
                    await message.answer(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                        reply_markup=get_admin_keyboard()
                    )
                else:
                    user.is_admin = True
                    db.commit()
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!",
                        reply_markup=get_admin_keyboard()
                    )
            else:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=get_admin_keyboard()
                )
        finally:
            db.close()
            
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_admins")]
            ])
        )
        return
    
    await state.clear()

@router.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_admins")]
        ])
    )
    await state.set_state(AdminStates.waiting_for_remove_admin_id)

@router.message(AdminStates.waiting_for_remove_admin_id)
async def remove_admin_handler(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        admin_id = int(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if admin_id == message.from_user.id:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
            return
        
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.user_id == admin_id).first()
            if user:
                if user.is_admin:
                    user.is_admin = False
                    db.commit()
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                        reply_markup=get_admin_keyboard()
                    )
                else:
                    await message.answer(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                        reply_markup=get_admin_keyboard()
                    )
            else:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=get_admin_keyboard()
                )
        finally:
            db.close()
            
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_admins")]
            ])
        )
        return
    
    await state.clear()