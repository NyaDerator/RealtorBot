from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from keyboards import *
from states import ApplicationStates
from database import SessionLocal, Application, User
from utils import validate_phone, validate_name

router = Router()

@router.message(CommandStart())
async def start_command(message: Message, user: User):
    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await message.answer(text, reply_markup=get_main_keyboard())

@router.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery, user: User):
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.user_id == user.user_id).first()
        
        if app:
            status_text = {
                "new": "üÜï –ù–æ–≤–∞—è",
                "in_progress": "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
                "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
            }.get(app.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            text += f"–ò–º—è: {app.name}\n"
            text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {app.phone}\n"
            text += f"–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {'–ö–≤–∞—Ä—Ç–∏—Ä–∞' if app.property_type == 'apartment' else '–î–æ–º'}\n"
            text += f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status_text}\n"
            
            if app.building_status:
                text += f"–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {app.building_status}\n"
            if app.district:
                text += f"–†–∞–π–æ–Ω: {app.district}\n"
            if app.rooms:
                text += f"–ö–æ–º–Ω–∞—Ç—ã: {app.rooms}\n"
            if app.has_plot:
                text += f"–£—á–∞—Å—Ç–æ–∫: {app.has_plot}\n"
            if app.house_type:
                text += f"–¢–∏–ø –¥–æ–º–∞: {app.house_type}\n"
            if app.admin_comment:
                text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {app.admin_comment}\n"
            
            text += f"\n–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.created_at.strftime('%d.%m.%Y %H:%M')}"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="delete_my_app")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        else:
            text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
            keyboard = get_main_keyboard()
    finally:
        db.close()
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "delete_my_app")
async def delete_my_app(callback: CallbackQuery, user: User):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_my_app")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É?\n\n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "confirm_delete_my_app")
async def confirm_delete_my_app(callback: CallbackQuery, user: User):
    db = SessionLocal()
    try:
        app = db.query(Application).filter(Application.user_id == user.user_id).first()
        if app:
            db.delete(app)
            user.has_application = False
            db.commit()
            
            await callback.message.edit_text(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                reply_markup=get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_main_keyboard()
            )
    finally:
        db.close()

@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery, user: User):
    text = f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())

@router.callback_query(F.data == "start_application")
async def start_application(callback: CallbackQuery, user: User):
    if user.has_application:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞! –£–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?",
        reply_markup=get_property_type_keyboard()
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ...
@router.callback_query(F.data.startswith("property_"))
async def property_type_handler(callback: CallbackQuery, state: FSMContext):
    property_type = callback.data.split("_")[1]
    await state.update_data(property_type=property_type)
    
    if property_type == "apartment":
        await callback.message.edit_text(
            "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å—Ç—Ä–æ—è—â–∞—è—Å—è –∏–ª–∏ —Å–¥–∞–Ω–Ω–∞—è?",
            reply_markup=get_building_status_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–£—á–∞—Å—Ç–æ–∫ —É–∂–µ –µ—Å—Ç—å?",
            reply_markup=get_has_plot_keyboard()
        )

@router.callback_query(F.data.startswith("building_"))
async def building_status_handler(callback: CallbackQuery, state: FSMContext):
    status = callback.data.split("_")[1]
    await state.update_data(building_status=status)
    
    if status == "new":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
            reply_markup=get_config_keyboard("rooms")
        )
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            reply_markup=get_config_keyboard("districts")
        )

@router.callback_query(F.data.startswith("plot_"))
async def plot_handler(callback: CallbackQuery, state: FSMContext):
    has_plot = "–î–∞" if callback.data.split("_")[1] == "yes" else "–ù–µ—Ç"
    await state.update_data(has_plot=has_plot)
    
    if has_plot == "–î–∞":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–º–∞:",
            reply_markup=get_config_keyboard("house_types")
        )
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É—á–∞—Å—Ç–∫–∞:",
            reply_markup=get_config_keyboard("districts")
        )

@router.callback_query(F.data.startswith("districts_"))
async def district_handler(callback: CallbackQuery, state: FSMContext):
    district = callback.data.split("_", 1)[1]
    await state.update_data(district=district)
    
    user_data = await state.get_data()
    
    if user_data.get("property_type") == "apartment" and user_data.get("building_status") == "ready":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
            reply_markup=get_config_keyboard("rooms")
        )
    else:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(ApplicationStates.waiting_for_name)

@router.callback_query(F.data.startswith("rooms_"))
async def rooms_handler(callback: CallbackQuery, state: FSMContext):
    rooms = callback.data.split("_", 1)[1]
    await state.update_data(rooms=rooms)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_name)

@router.callback_query(F.data.startswith("house_types_"))
async def house_type_handler(callback: CallbackQuery, state: FSMContext):
    house_type = callback.data.split("_", 1)[1]
    await state.update_data(house_type=house_type.replace('types_ ', ''))
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_name)

@router.message(ApplicationStates.waiting_for_name)
async def name_handler(message: Message, state: FSMContext):
    if not validate_name(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_phone)

@router.message(ApplicationStates.waiting_for_phone)
async def phone_handler(message: Message, state: FSMContext, user: User):
    if not validate_phone(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    user_data = await state.get_data()
    
    db = SessionLocal()
    try:
        application = Application(
            user_id=user.user_id,
            property_type=user_data.get("property_type"),
            building_status=user_data.get("building_status"),
            district=user_data.get("district"),
            rooms=user_data.get("rooms"),
            has_plot=user_data.get("has_plot"),
            house_type=user_data.get("house_type"),
            name=user_data.get("name"),
            phone=message.text,
            status="new"
        )
        
        db.add(application)
        user.has_application = True
        db.commit()
        
    finally:
        db.close()
    
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )